{
  "title": "オーディオアプリケーションをWebでつくる",
  "slide2": {
    "heading": "Webで音を鳴らす"
  },
  "slide3": {
    "heading": "Webで音を鳴らす2つの方法"
  },
  "slide4": {
    "heading": "どちらを選ぶべき？ 🤔"
  },
  "slide5": {
    "when": "こんなとき...",
    "list1": "音声ファイルを再生したいだけ",
    "list2": "読み込みを細かく制御する必要がない",
    "list3": "そのまま再生するだけでよい",
    "or": "または"
  },
  "slide9": {
    "heading": "...物足りない？"
  },
  "slide10": {
    "heading": "Web Audio APIの世界へようこそ 🤝",
    "survey": "ちょっとアンケート：Web Audio APIを使ったことがある人？"
  },
  "slide11": {
    "list1": "音声処理のためのJavaScript API",
    "list2": "ノードベース",
    "list3": "専用オーディオスレッドで動作",
    "list4": "汎用的なビルトインノード（ゲイン、フィルター、オシレーターなど）"
  },
  "slide12": {
    "heading": "Web Audio APIでシンプルなプレイバック",
    "subtitle": "ローパスフィルター付き"
  },
  "slide14": {
    "heading": "👁️ ビルトインノードでは物足りない時...",
    "rescue": "が助けてくれます！ 🧑‍🚒"
  },
  "slide15": {
    "list1": "オーディオレンダリングスレッドでカスタム音声処理が書ける",
    "list2": "オーディオスレッドで動作（メインスレッドではない）",
    "list3": "Processor + Node の2部構成",
    "list4": "addModule()を使ってプロセッサモジュールを読み込む",
    "list5": "MessagePortで双方向通信"
  },
  "slide16": {
    "heading": "コード例：GainProcessorを作る",
    "basedOn": "出典："
  },
  "slide17": {
    "mainThread": "メインスレッド",
    "yourApp": "アプリ",
    "audioThread": "オーディオスレッド",
    "processor": "プロセッサ"
  },
  "slide18": {
    "heading": "楽しい例：シンプルなリバーブ"
  },
  "slide20": {
    "mainThread": "メインスレッド",
    "audioThread": "オーディオスレッド"
  },
  "slide21": {
    "heading": "⚠️ 重要：3msルール",
    "list1": "44.1kHzでは、",
    "list1b": "が",
    "list1c": "毎秒約344回",
    "list1d": "呼ばれる（各128フレーム）",
    "list2": "各呼び出しは",
    "list2b": "約3ms",
    "list2c": "以内に完了する必要がある",
    "list3": "この時間を超えると",
    "list3b": "音声にグリッチが発生する",
    "source": "出典："
  },
  "slide22": {
    "heading": "ライブデモ：3ms制限を超えてみる",
    "description": "スライダーで人為的な負荷をかけられます。処理時間がsmsを超えると何が起こるか見てみましょう。"
  },
  "slide24": {
    "heading": "もっと速度が必要？",
    "answer": "...WebAssemblyが解決します 🚀"
  },
  "slide25": {
    "heading": "AudioWorkletでWebAssemblyを活用する",
    "whyWasm": "なぜWASM？ 🤔",
    "list1": "複雑な音声処理でもネイティブに近いパフォーマンス",
    "list2": "既存のオーディオコードベースをブラウザで再利用できる",
    "popularOptions": "人気のオプション：",
    "juceDesc": "プロフェッショナルなオーディオフレームワーク（Synthesizer Vで使用）",
    "rnboDesc": "Max/MSPパッチをWeb Audioにエクスポート"
  },
  "slide26": {
    "heading": "JUCEとは？ 🎵",
    "list1": "オーディオアプリケーションとプラグインを構築するためのC++フレームワーク",
    "list2": "Adobe、Steinberg、Universal Audio、Wavesなどが使用",
    "list3": "クロスプラットフォーム：Windows、macOS、Linux、iOS、Android",
    "list4": "主要なプラグインフォーマットをすべてサポート（VST、AU、AAX）"
  }
}
